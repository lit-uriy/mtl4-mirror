// vim: syn=cpp:
#ifndef LAMBDA_IFWHILE_HPP
#define LAMBDA_IFWHILE_HPP

#include "tags.hpp"

[typed_closure if_ {Test Th El} {TestT ThenT ElseT} \
  [get_type_is "[get_type test Env @]" \
	       "TestT: [get_type th Env @]" \
	       "ThenT: [get_type el Env @]" \
	       "ElseT: k(typed_if_(testt, thent, elset))"] \
  [returns "void"] \
  [run_is "if (testt.run(env)) thent.run(env); else elset.run(env);"]]

[typed_closure while_ {Test Body} {TestT BodyT} \
  [get_type_is "[get_type test Env @]" \
	       "TestT: [get_type body Env @]" \
	       "BodyT: k(typed_while_(testt, bodyt))"] \
  [returns "void"] \
  [run_is "while (testt.run(env)) bodyt.run(env);"]]

#endif // LAMBDA_IFWHILE_HPP
