// vim: syn=cpp:
#ifndef LAMBDA_LAMBDA_HPP
#define LAMBDA_LAMBDA_HPP

#include "tags.hpp"

[typed_closure apply {Rator Rand} {RatorT RandT} \
  [get_type_is "[get_type rator Env @]" \
	       "RatorT: [get_type rand Env @]" \
	       "RandT: k(typed_apply(ratort,randt))"] \
  [returns "typename RatorT::type::result_type"] \
  [run_is "return ratort.run(env)(randt.run(env));"]]

[closure closure {^Argname Body Env} {Funcptr} \
  "typedef typename boost::function_traits<typename boost::remove_pointer<Funcptr>::type>::arg1_type arg1_type;
  typedef typename boost::function_traits<typename boost::remove_pointer<Funcptr>::type>::result_type result_type;
  result_type operator()(arg1_type x) const {
    return body.run(env.extend(Argname(), x));
  }
  "]

[typed_closure lambda {^Argname Body %Functype} {Argname BodyT %Funcptr %EnvT} \
  [get_type_is "[get_type body [extend_abs Env Argname "typename boost::function_traits<Functype>::arg1_type"] @]" \
	       "BodyT: k(typed_lambda<Functype*,Env>(argname, bodyt))"] \
  [returns "closure_type<Funcptr,Argname,BodyT,EnvT>"] \
  [run_is "return closure<Funcptr>(argname, bodyt, env);"]]

#endif // LAMBDA_LAMBDA_HPP
