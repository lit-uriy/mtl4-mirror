Import('opt_env mpi_opt_env check full_warnings')
import glob, re

sources = glob.glob("*.cpp")

if opt_env['CC'] == 'cl':
    # assignment doesn't work with templates on cl
    sources.remove('vector2.cpp')

if full_warnings:
    sources.remove('simulated_annealing.cpp')

# with -pedantic and -Werror boost/random.hpp does not compile (used in simulated annealing)
# thus with this options, skip it
# sources.remove('simulated_annealing.cpp')

programs, mpi_programs = [], []
for p in sources:
    if 'mpi_' == p[0:4]:
        mpi_programs.append(mpi_opt_env.Program(p))
    else:
        programs.append(opt_env.Program(p))

if int(check):
    for p in programs:
        opt_env.AddPostAction(p, p[0].abspath)
    for p in mpi_programs:
        tmatch = re.search('mpi_(\d*).*', str(p))
        # mpi_opt_env.AddPostAction(p, 'mpirun -mca btl tcp,self -np ' + tmatch.group(1) + ' ' + p[0].abspath)
        mpi_opt_env.AddPostAction(p, 'mpirun -np ' + tmatch.group(1) + ' ' + p[0].abspath)

Default(programs + mpi_programs)
