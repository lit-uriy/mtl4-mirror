#!/usr/bin/env python
import sys, re, string, os, os.path

if len(sys.argv) != 2:
  print "syntax:", sys.argv[0], "source (cuhpp file)"
  sys.exit(1)

def find_first_line(lines, pattern):
  for i in xrange(len(lines)):
    if lines[i].count(pattern):
      return i
  

cuhpp= open(sys.argv[1], "r")
cu_name= sys.argv[1].replace(".cuhpp", ".cu")
cu=    open(cu_name, "r")
hpp=   open(sys.argv[1].replace(".cuhpp", ".hpp"), "w")

# Copying first part of header (license + includes)
cu_lines= cu.readlines()

# Guard name
guard_no= find_first_line(cu_lines, "#ifndef")
guard_name= cu_lines[guard_no][8:]

# Copy license part
end_license= find_first_line(cu_lines, "include")
end_includes= find_first_line(cu_lines, "namespace")

if end_license == None:
  # print "No include found"
  end_license= end_includes

hpp.writelines(cu_lines[:end_license])

# Cuda includes
hpp.writelines(["// Here come Cuda includes ...\n\n"])
hpp.writelines(["//testing...\n\n"])
hpp.writelines(["#include </usr/local/cuda/include/__cudaFatFormat.h>\n",
               "#include </usr/local/cuda/include/host_defines.h>\n",
#               "#include </usr/local/cuda/include/cudaGL.h>\n",
               "#include </usr/local/cuda/include/cuda_runtime.h>\n",
               "#include </usr/local/cuda/include/cufft.h>\n",
               "#include </usr/local/cuda/include/cuda_runtime_api.h>\n",
#               "#include </usr/local/cuda/include/common_functions.h>\n",
#               "#include </usr/local/cuda/include/texture_types.h>\n",
#               "#include </usr/local/cuda/include/sm_13_double_functions.h>\n",
               "#include </usr/local/cuda/include/device_launch_parameters.h>\n",
#               "#include </usr/local/cuda/include/cublas.h>\n",
               "#include </usr/local/cuda/include/cuda.h>\n",
#               "#include </usr/local/cuda/include/sm_11_atomic_functions.h>\n",
               "#include </usr/local/cuda/include/driver_types.h>\n",
#               "#include </usr/local/cuda/include/cuda_gl_interop.h>\n",
               "#include </usr/local/cuda/include/common_types.h>\n",
#               "#include </usr/local/cuda/include/sm_12_atomic_functions.h>\n",
#               "#include </usr/local/cuda/include/device_functions.h>\n",
               "#include </usr/local/cuda/include/device_types.h>\n",
#               "#include </usr/local/cuda/include/texture_fetch_functions.h>\n",
#               "#include </usr/local/cuda/include/math_functions.h>\n",
#               "#include </usr/local/cuda/include/builtin_types.h>\n",
#               "#include </usr/local/cuda/include/vector_types.h>\n",
#               "#include </usr/local/cuda/include/math_constants.h>\n",
#               "#include </usr/local/cuda/include/math_functions_dbl_ptx3.h>\n",
#               "#include </usr/local/cuda/include/cuComplex.h>\n",
               "#include </usr/local/cuda/include/host_config.h>\n",
#               "#include </usr/local/cuda/include/driver_functions.h>\n",
#               "#include </usr/local/cuda/include/vector_functions.h>\n",
#               "#include </usr/local/cuda/include/channel_descriptor.h>\n",
#               "#include </usr/local/cuda/include/math_functions_dbl_ptx1.h>\n",
#               "#include </usr/local/cuda/include/cuda_texture_types.h>\n",
#               "#include </usr/local/cuda/include/crt/storage_class.h>\n",
#               "#include </usr/local/cuda/include/crt/func_macro.h>\n",
#               "#include </usr/local/cuda/include/crt/host_runtime.h>\n",
#               "#include </usr/local/cuda/include/crt/device_runtime.h>\n"
])

for j in range(end_includes):
  cu_lines[j]= cu_lines[j].replace(".cu>", ".hpp>")
hpp.writelines(cu_lines[end_license:end_includes])

# Copying relevant part of generated code
cuhpp_lines= cuhpp.readlines()

# First line of our code
start_gen= pos= 0
while 1:
  start_gen= find_first_line(cuhpp_lines[pos:], '"' + cu_name + '"')
  # print "Found ", cu_name, " in line ", start_gen, ", pos = ", pos
  if cuhpp_lines[pos+start_gen+1].count("namespace mtl"):
    start_gen= pos+start_gen+1
    break
  pos+= start_gen+1

# First line of foreign code
pos= start_gen
while 1:
  end_gen= find_first_line(cuhpp_lines[pos:], "# ") 
  if cuhpp_lines[pos+end_gen].count('"' + cu_name + '"'):
    hpp.writelines(cuhpp_lines[pos:pos+end_gen])    
    pos+= end_gen+1
  else:
    end_gen+= pos
    break

hpp.writelines(["\n#endif // " + guard_name + "\n\n"])

