import glob, re

Import('debug_env mpi_debug_env check full_warnings')

# print "SConscript: debug_env[CXX] = ", debug_env['CXX']

sources = glob.glob("*.cpp")

if full_warnings:
    sources.remove('matrix_matrix_scalar_product_test.cpp') # int->double -> warning -> error 

#print "\n".join(map(str, mpi_debug_env.Dictionary().items())) # line-wise list of flags
#if mpi_debug_env.Dictionary()['CCFLAGS'].count('-DMTL_HAS_TOPOMAP') == 0:
#    sources.remove('mpi_3_parmetis_matrix_migration_test.cpp')

#if not mpi_debug_env.has_key('')

programs, mpi_programs = [], []
for p in sources:
    if 'mpi_' == p[0:4]:
        if 'mpi_3_parmetis_matrix_migration_test.cpp' == p and mpi_debug_env.Dictionary()['CCFLAGS'].count('-DMTL_HAS_TOPOMAP'):
	    mpi_programs.append(mpi_debug_env.Program([p, '../../../../../../../../Software/topomap/virt_graph_scal.o']))
	else:
 	    mpi_programs.append(mpi_debug_env.Program(p))
    else:
        programs.append(debug_env.Program(p))

if int(check):
    for p in programs:
        debug_env.AddPostAction(p, p[0].abspath)
    for p in mpi_programs:
        tmatch = re.search('mpi_(\d*).*', str(p))
        mpi_debug_env.AddPostAction(p, 'mpirun -mca btl tcp,self -np ' + tmatch.group(1) + ' ' + p[0].abspath)

Default(programs + mpi_programs)

# To run only mpi programs: scons -D check=1 `ls mpi*.cpp | sed s/\.cpp//g`  
