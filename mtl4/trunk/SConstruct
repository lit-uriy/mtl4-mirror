import getopt, sys, os, re, string

######################
# Helper functions
######################


# add debugging flags to environment
def add_debug(env):
     env.Append(CCFLAGS = '-g -DMTL_ASSERT_FOR_THROW')
   

def check_g5():
    print "platform ", sys.platform
    if sys.platform == "darwin" :

	system("/usr/bin/system_profiler SPHardwareDataType")
	profile = os.popen("system_profiler SPHardwareDataType").read()
	print profile
	if profile.find("Mac G5") != -1:
	    print "is G5"
	    return 1
    print "isn't G5"
    return None

# add optimization flags to environment
# normal optimization for opt=1, for opt=2 high optimization
def add_opt(env, opt):
    env.Append(CCFLAGS = '-DNDEBUG')
    if (opt == 2):
	env.Append(CCFLAGS = '-O3')
	if conf.env['CC'] == 'gcc':
	    env.Append(CCFLAGS = '-ffast-math')
	#check_g5()
    elif int(opt) == 1:
	env.Append(CCFLAGS = '-O2')
    env.Append(CXXFLAGS = conf.env['CCFLAGS'])
	

def check_no_long_double(conf):
    cc = conf.env['CC']
    if cc == 'gcc':
	output = os.popen(cc + " --version").read()
	st = output.split('\n')[0]
	tmatch = re.search(".* \(GCC\) (\d\.\d)", st)
	if tmatch and string.atof(tmatch.group(1)) == 4.0:
	    conf.env.Append(CCFLAGS = '-Wno-long-double')
	    # conf.env.Append(CXXFLAGS = '-Wno-long-double')


def add_user_opt(env, add_optflag):
     env.Append(CCFLAGS = add_optflag)
     env.Append(CXXFLAGS = add_optflag)

###############################
# check for installed blas ...
# search different libraries
###############################
def detected_blas(env): # blas library found
   env.Append(CPPDEFINES = 'MTL_HAS_BLAS')

def check_for_blas(env):
 # symbolname
 symname = 'dgemm_'
 found_blas = 0

 # get command line blas path
 blas_path = ARGUMENTS.get('blas_path', '')
 if blas_path:
   print 'adding ' + blas_path + ' to LIBPATH.'
   env.Append(LIBPATH = [ blas_path, blas_path + '/lib/' ])
 
 # extra linker flags for blas
 blas_ldflags = ARGUMENTS.get('blas_ldflags', '')
 if blas_ldflags:
   env.Prepend(_LIBFLAGS=blas_ldflags.split())

 # get command line blas lib
 blas_lib = ARGUMENTS.get('blas_lib', '')
 if blas_lib:
   myenv = env.Copy()
   conf = Configure(myenv)
   # check supplied lib
   print "Checking for lib " + blas_lib + "..."
   if conf.CheckLib(blas_lib, symname):
     detected_blas(myenv)
     found_blas = 1
   myenv = conf.Finish()
   if(found_blas == 1):
     return myenv
 else:
   print "Autodetecting BLAS support. See config.log for details!"
     
   ########################
   # check for acml
   myenv = env.Copy()
   # new configure object
   conf = Configure(myenv)
   # additional libs needed for acml
   myenv.Append(LIBS=['m', 'g2c'])
   if conf.CheckLib('acml', symname):
     detected_blas(myenv)
     found_blas = 1
   myenv = conf.Finish()
   if(found_blas == 1):
     return myenv
  
   ########################
   # check for goto
   myenv = env.Copy()
   # new configure object
   conf = Configure(myenv)
   # additional libs needed for goto
   myenv.Append(LIBS=['pthread'])
   # extra linker flags for libgoto
   # myenv.Append(_LIBFLAGS=['libs/numeric/mtl/build/xerbla.c'])
   myenv.Append(_LIBFLAGS=['libs/numeric/mtl/build/xerbla.o']) # not portable !!! 
   # myenv.Library('build/xerbla', 'build/xerbla.c')
   # myenv.Append(LIBS=['xerbla'])
   # myenv.Append(LIBPATH=['build'])

   if conf.CheckLib('goto', symname) or conf.CheckLib('goto_opteron-64', symname) or \
      conf.CheckLib('goto_coppermine-32', symname) or conf.CheckLib('goto_opteron-32', symname) or \
      conf.CheckLib('goto_itanium2-64', symname) or conf.CheckLib('goto_katmai-32', symname) or \
      conf.CheckLib('goto_northwood-32', symname) or conf.CheckLib('goto_prescott-32', symname) or \
      conf.CheckLib('goto_prescott-64', symname):
     detected_blas(myenv)
     found_blas = 1
   myenv = conf.Finish()
   if(found_blas == 1):
     return myenv
  
   ########################
   # check for ATLAS
   myenv = env.Copy()
   # new configure object
   conf = Configure(myenv)
   # additional libs needed for goto
   myenv.Append(LIBS=['f77blas', 'g2c'])
   if conf.CheckLib('atlas', symname):
     detected_blas(myenv)
     found_blas = 1
   myenv = conf.Finish()
   if(found_blas == 1):
     return myenv

 return env
 
 


######################
# Start setting up env
######################


SourceSignatures('timestamp')

env = Environment()

conf = Configure(env)
check_no_long_double(conf)
env = conf.Finish()

# Search only for BLAS when explicitly asked for
with_blas = ARGUMENTS.get('with_blas', 0)
if int(with_blas):
    env = check_for_blas(env)

# env = check_for_blas(env)


######################
# Include paths
######################


my_cpppath = []
if os.environ.has_key('MTL_BOOST_ROOT') :
    mtlp = os.environ['MTL_BOOST_ROOT']
    my_cpppath.append(mtlp)
if os.environ.has_key('BOOST_ROOT') :
    my_cpppath.append(os.environ['BOOST_ROOT'])

# In branches, the current directory is prepended
pwd = os.getcwd()
if not os.environ.has_key('MTL_BOOST_ROOT') or not os.path.samefile(pwd, mtlp):
     my_cpppath = [pwd] + my_cpppath

env.Append(CPPPATH = my_cpppath)


######################
# Opt. and debug flags
######################


opts = Options()
opts.Add('opt', 'Set to 1 for normal optimization, 2 for high optimization', 0)
opts.Add('debug', 'Set to 1 for debugging', 0)
opts.Add('check', 'Set to 1 if test programs shall be ran', 0)

opts.Add('add_ccflag', 'Add extra CC compiler flags that aren\'t automatically set', '')
opts.Add('add_cxxflag', 'Add extra CXX compiler flags that aren\'t automatically set', '')
opts.Add('add_optflag', 'Add extra optimization flags that aren\'t automatically set', '')

opts.Add('with_blas', 'Link with BLAS (have to given each time :-( until we can save configurations)', 0)
opts.Add('blas_path', 'Add path of blas library', '')
opts.Add('blas_lib', 'Add name of blas library', '')
opts.Add('blas_ldflags', 'Add LDFLAGS for blas library', '')


Help(opts.GenerateHelpText(env))

#env.Append(CCFLAGS = ARGUMENTS.get('debug', ''))

# add user-defined CC flags 
add_ccflag = ARGUMENTS.get('add_ccflag', '')
if add_ccflag:
     env.Append(CCFLAGS = add_ccflag)

# add user-defined CXX flags 
add_cxxflag = ARGUMENTS.get('add_cxxflag', '')
if add_cxxflag:
     env.Append(CXXFLAGS = add_cxxflag)

#create alternative environments
basic_env = env.Copy()
debug_env = env.Copy()
opt_env = env.Copy()
high_opt_env = env.Copy()

# add debugging flags to appropriate environment
debug = ARGUMENTS.get('debug', 0)
if int(debug):
    add_debug(env)
add_debug(debug_env)


# add optimization flags to appropriate environment
opt = ARGUMENTS.get('opt', 0)
if int(opt):
    add_opt(env, int(opt))
add_opt(opt_env, 1)
add_opt(high_opt_env, 2)

# add user-defined optimization flags 
add_optflag = ARGUMENTS.get('add_optflag', '')
if add_optflag:
     add_user_opt(env, add_optflag)
     add_user_opt(opt_env, add_optflag)
     add_user_opt(high_opt_env, add_optflag)

# whether test programs should be ran
check = ARGUMENTS.get('check', 0)


#####################
# Sub-directories
#####################

Export('env basic_env debug_env opt_env high_opt_env check')

SConscript(['libs/numeric/mtl/build/SConscript', 
            'libs/numeric/mtl/test/SConscript', 
            'libs/numeric/mtl/examples/SConscript', 
            'libs/numeric/mtl/experimental/SConscript',
            'libs/numeric/mtl/timing/SConscript'])

